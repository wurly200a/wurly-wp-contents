#+BLOG: wurly-blog
#+POSTID: 1675
#+ORG2BLOG: Emacs
#+DATE: [2024-11-16 Sat 12:59]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Emacs, C
#+TAGS: 
#+DESCRIPTION:
#+TITLE: C/C++ で Emacs lsp-mode (ccls)

* 概要

C/C++でlspを使用します。
以前、clangdを試用したのですが、あまり良くなかったのでC/C++では無効にして、gtags(GNU Global)を使っていました。
最近Cのソースを読むことが多くなったので、再度検討してみます。

下記では複数lspのフロントエンドとC/C++向けのバックエンド(サーバー)の組み合わせの比較をされており、参考になりました。

 - [[https://nobiruwa.github.io/posts/2019-04-07-emacs-as-cpp-ide.html][My Hakyll Blog - EmacsでのC/C++開発]]
https://nobiruwa.github.io/posts/2019-04-07-emacs-as-cpp-ide.html

確かに、clangdは重すぎて使い物にならなかった気がします。
バックエンドとしてcclsを使うのが良さそうですのでこちらにトライします。

#+begin_src bash
$ sudo apt list | grep ccls
ccls/jammy 0.20210330-1 amd64
#+end_src

* Ubuntuでのビルド及びインストール

依存するパッケージをインストールします。

#+begin_src bash
sudo apt install clang libclang-dev zlib1g-dev libncurses-dev rapidjson-dev
#+end_src

インストールされたclangのバージョンを確認します。私の環境(Ubuntu 22.04)ではllvm-14でした。

#+begin_src bash
$ ls /usr/lib/ | grep llvm
llvm-14
#+end_src

ソースをクローンします。

#+begin_src bash
git clone --recursive https://github.com/MaskRay/ccls
#+end_src

ビルドします。前述の通り確認したバージョンを指定します。

#+begin_src bash
cd ccls
cmake -S. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/usr/lib/llvm-14
cmake --build Release
#+end_src

生成されたバイナリの置き場を指定して使用することも可能ですが、ここでは、生成されたバイナリを ~/bin/ にコピーして使用します。

#+begin_src 
mkdir -p ~/bin
cp ./Release/ccls ~/bin/
#+end_src

* init.elの設定

#+begin_src emacs-lisp
(use-package ccls
  :ensure t
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))

(setq ccls-executable "~/bin/ccls")
(setq ccls-args '("--init={\"cache\": {\"directory\": \"/tmp/ccls-cache\"}}"))
#+end_src

* プロジェクト毎の設定

lspとしてのプロジェクトのルートディレクトリに .ccls ファイルを置くことでコンパイルコマンド、インクルードパスや定義済みマクロを指定することができます。

例えば下記の様に記載します。

#+begin_src 
clang
-Iinclude
-D__GLIBC__
#+end_src

M-x lsp-workspace-restart を行うことで、設定変更内容を反映させることができます。

* 参考
 - [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][Project Setup · MaskRay/ccls Wiki · GitHub]]
 - [[https://github.com/MaskRay/ccls/wiki/Customization][Customization · MaskRay/ccls Wiki · GitHub]]
 - [[https://granddaifuku.hatenablog.com/entry/emacs-ccls][Emacs で ccls 導入して競プロ - 雄大な大福]]
